@page "/book/{BookId}"
@inject HttpClient Http
@inject NavigationManager Nav;

<PageTitle>Typerary - Book</PageTitle>

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
    <article class="content p-5 m-5 body-bg-alpha rz-shadow-8 rz-border-radius-3">
        @if (false)
        {
            <div class="loader">Loading...</div>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.DisplayH4" TagName="TagName.H3" class="mb-5 article-heading" data-en="Practice">@(bookTitle)</RadzenText>
            <Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(0.75)">
                <RadzenTabs @bind-SelectedIndex=@tabIndex>
                    <Tabs>
                        <RadzenTabsItem Text="Practice">

                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col">
                                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="mb-2">本文</RadzenText>
                                        <p class="w-100 my-3" Style="font-size: 1.5rem; line-height: 2em">
                                            @((MarkupString)Markdown.ToHtml(currentTaskSentence))
                                        </p>
                                    </div>
                                    <div class="col">
                                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="mb-2">入力</RadzenText>
                                        <RadzenTextArea Rows=10 class="w-100" AutoComplete="false" Style="font-size: 1.5rem" @onkeypress=@(args => OnKeyPress(args)) @oncopy=@(args => OnCopy()) @onpaste=@(args => OnPaste()) @oninput=@(args => OnInput(args.Value.ToString())) />
                                    </div>
                                </div>
                            </div>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Result">
                            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H3" class="mb-3 cormonant">Result</RadzenText>
                            <RadzenArcGauge Style="width: 100%; height: 200px;">
                                <RadzenArcGaugeScale Step="0.50" Min="95" Max="100" MinorStep="0.1" Radius="1.5" TickPosition=@tickPosition Y="0.9" Margin="0">
                                    <RadzenArcGaugeScaleValue Value=@value ShowValue=@showValue>
                                        <Template Context="pointer">
                                            <RadzenText TextStyle="TextStyle.DisplayH5" TagName="TagName.H5" class="cormonant">Accuracy @(pointer.Value.ToString("0.00")) %</RadzenText>
                                        </Template>
                                    </RadzenArcGaugeScaleValue>
                                </RadzenArcGaugeScale>
                            </RadzenArcGauge>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </Animate>
        }
    </article>
</Animate>

@code {
    private int tabIndex = 0;
    bool showValue = true;
    double value = 99.3;
    IEnumerable<GaugeTickPosition> tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
    GaugeTickPosition tickPosition = GaugeTickPosition.Outside;

    private string bookTitle = "";
    private int idx = 0;
    private Typerary.Shared.BookData[] bookData;
    private List<string> taskSentences = new();
    private string currentTaskSentence = "";

    [Parameter]
    public string BookId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var sanitizer = new HtmlSanitizer();
            var sanitizedId = sanitizer.Sanitize(BookId);
            var jsonData = await Http.GetFromJsonAsync<Typerary.Shared.Book>($"jsondata/works/{sanitizedId}.json");
            bookTitle = jsonData.Title;
            bookData = jsonData.Content;
            foreach (var section in bookData)
            {
                foreach (var sentence in section.Sentences)
                {
                    taskSentences.Add(sentence.OriginSentence);
                }
            }
            currentTaskSentence = taskSentences[0];
            foreach (var sentence in taskSentences)
            {
                Console.WriteLine(sentence);
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Exception: HttpRequestException \n{ex.Message}");
            //Nav.NavigateTo("/works", false);
        }
        catch (TaskCanceledException ex)
        {
            Console.WriteLine($"Exception: TaskCanceledException \n{ex.Message}");
            //Nav.NavigateTo("/works", false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception \n{ex.Message}");
            //Nav.NavigateTo("/works", false);
        }
    }

    private void OnKeyPress(KeyboardEventArgs keyEvent)
    {
        var key = keyEvent.Key;
        var isCtrl = keyEvent.CtrlKey;
        Console.WriteLine($"Key -> {key.ToString()}, isCtrl -> {isCtrl.ToString()}");
        if (isCtrl && key.Equals("Enter"))
        {
            idx = (idx + 1 < taskSentences.Count) ? idx + 1 : idx;
            currentTaskSentence = taskSentences[idx];
        }
    }

    private void OnInput(string? value)
    {
        if (value is null) return;
        Console.WriteLine(value);
    }

    private void OnCopy()
    {
        Console.WriteLine("Copy detected");
    }

    private void OnPaste()
    {
        Console.WriteLine("Paste Detected");
    }
}
