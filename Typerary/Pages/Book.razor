@page "/book/{BookId}"
@inject HttpClient Http
@inject NavigationManager Nav;

<PageTitle>Typerary - Book</PageTitle>

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
    <article class="content p-5 m-5 body-bg-alpha rz-shadow-8 rz-border-radius-3">
        @if (!isLoadComplete)
        {
            <div class="loader">Loading...</div>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.DisplayH4" TagName="TagName.H3" class="mb-5 article-heading" data-en="Practice">@(bookTitle)</RadzenText>
            <Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(0.75)">
                <RadzenTabs @bind-SelectedIndex=@tabIndex>
                    <Tabs>
                        <RadzenTabsItem Text="Practice">
                            <Practice BookData=@(Book.bookData) />
                        </RadzenTabsItem>

                        <RadzenTabsItem Text="Config">
                            <Config />
                        </RadzenTabsItem>

                        <RadzenTabsItem Text="Result(Summary)">
                            <SummaryResult />
                        </RadzenTabsItem>

                        <RadzenTabsItem Text="Result(Detail)">
                            <DetailResult />
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </Animate>
        }
    </article>
</Animate>

@code {
    private static bool isLoadComplete = false;
    private static string bookTitle = "";
    private static Typerary.Shared.BookData[] bookData;
    private static List<string> taskSentences = new();
    private static int tabIndex = 0;

    [Parameter]
    public string BookId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var sanitizedBookId = GetSanitizedBookId(BookId);
            var jsonData = await Http.GetFromJsonAsync<Typerary.Shared.Book>($"jsondata/works/{sanitizedBookId}.json");
            SetBookInformation(jsonData);
            isLoadComplete = true;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Exception: HttpRequestException \n{ex.Message}");
            //Nav.NavigateTo("/works", false);
        }
        catch (TaskCanceledException ex)
        {
            Console.WriteLine($"Exception: TaskCanceledException \n{ex.Message}");
            //Nav.NavigateTo("/works", false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception \n{ex.Message}");
            //Nav.NavigateTo("/works", false);
        }
    }

    private string GetSanitizedBookId(string originalBookId)
    {
        var sanitizer = new HtmlSanitizer();
        var sanitizedId = sanitizer.Sanitize(BookId);
        return sanitizedId;
    }

    private void SetBookInformation(Shared.Book jsonData)
    {

        bookTitle = jsonData.Title;
        bookData = jsonData.Content;
    }
}
