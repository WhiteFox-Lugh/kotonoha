<div class="container-fluid my-2">
    <div class="row rz-border-radius-5">
        <div class="col">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="mb-2">本文</RadzenText>
            <p class="w-100 my-3" Style="font-size: 1.2rem; line-height: 2em; user-select:none">
                @((MarkupString)Markdown.ToHtml(currentTaskSentence))
            </p>
        </div>
        <div class="col">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="mb-2">入力</RadzenText>
            <RadzenTextArea Rows=10 class="w-100" AutoComplete="false" Style="font-size: 1.2rem" @bind-Value=@currentInputSentence @onkeyup=@(args => OnKeyUp(args)) @oncopy=@(args => OnCopy()) @onpaste=@(args => OnPaste()) @oninput=@(args => OnInput(args.Value.ToString())) />
        </div>
    </div>
</div>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col">
            <!-- TODO: タイマーをここに用意したい -->
        </div>
        <div class="col">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5">
                操作:
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                ・Ctrl 押しながら Enter : 次のセクション
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                ・F2 を3回 : 終了
            </RadzenText>

        </div>
    </div>
</div>

@code {
    private const string EnterKeyStr = "Enter";
    private static string currentTaskSentence = "";
    private static string currentInputSentence = "";

    private PracticeController controller;

    [Parameter]
    public BookContent[] BookData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        controller = Practice.controller;
        controller.ResetTaskIndex();
        currentTaskSentence = controller.GetFirstTaskSentence();
    }

    private void GoNextSection()
    {
        // 次の文章があるかどうか?
        // TODO : なければ最終セクションの処理
        if (controller.HasNextTaskSentence())
        {
            var nextTaskSentence = controller.GetNextTaskSentence();
            currentTaskSentence = nextTaskSentence;
            // 入力文章の送信
            controller.SendAndScoringInputSentence(currentInputSentence);
        }
        // 最終セクション
        else
        {
            currentTaskSentence = "";
            // 入力文章の送信
            controller.SendAndScoringInputSentence(currentInputSentence);
            controller.DoFinishProcess();
        }
        currentInputSentence = "";
        controller.IncrementTaskSentenceIndex();
    }

    private void OnKeyUp(KeyboardEventArgs keyEvent)
    {
        Console.WriteLine("********START OnKeyUp********");
        // Ctrl + Enter キーの同時押しのみ
        var isCtrlKeyDown = keyEvent.CtrlKey;
        var isEnterKeyDown = keyEvent.Key.Equals(EnterKeyStr);
        if (!(isCtrlKeyDown && isEnterKeyDown)) { return; }
        GoNextSection();
        Console.WriteLine("********END OnKeyUp********");
    }

    private void OnInput(string? value)
    {
        if (value is null) return;
        Console.WriteLine(value);
        currentInputSentence = value;
    }

    private void OnCopy()
    {
        Console.WriteLine("Copy detected");
    }

    private void OnPaste()
    {
        Console.WriteLine("Paste Detected");
    }
}