<div class="container-fluid my-2">
    <div class="row rz-border-radius-5">
        <div class="col">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="mb-2">本文</RadzenText>
            <p class="w-100 my-3" Style="font-size: 1.2rem; line-height: 2em">
                @((MarkupString)Markdown.ToHtml(currentTaskSentence))
            </p>
        </div>
        <div class="col">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" class="mb-2">入力</RadzenText>
            <RadzenTextArea Rows=10 class="w-100" AutoComplete="false" Style="font-size: 1.2rem" @bind-Value=@currentInputSentence @onkeypress=@(args => OnKeyPress(args)) @oncopy=@(args => OnCopy()) @onpaste=@(args => OnPaste()) @oninput=@(args => OnInput(args.Value.ToString())) />
        </div>
    </div>
</div>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5">
                Remaining time: @restTime sec.
            </RadzenText>
        </div>
        <div class="col">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5">
                Commands:
            </RadzenText>
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.P">
                ・Ctrl + Enter : Next Line
            </RadzenText>
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.P">
                ・F2 → F2 : Quit
            </RadzenText>

        </div>
    </div>
</div>

@code {
    private static string currentTaskSentence = "";
    private static string currentInputSentence = "";
    private static int timeLimit = 60 * 60;
    private static int restTime = 300;
    private static int idx = 0;
    private PracticeController controller;

    [Parameter]
    public Typerary.Shared.BookContent[] BookData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        controller = Practice.controller;
        currentTaskSentence = controller.TaskSentences[0];
        controller.InputSentences.Clear();
    }

    private void OnKeyPress(KeyboardEventArgs keyEvent)
    {
        var key = keyEvent.Key;
        var isCtrl = keyEvent.CtrlKey;
        Console.WriteLine($"Key -> {key.ToString()}, isCtrl -> {isCtrl.ToString()}");
        if (isCtrl && key.Equals("Enter"))
        {
            idx = (idx + 1 < controller.TaskSentences.Count) ? idx + 1 : idx;
            currentTaskSentence = controller.TaskSentences[idx];
            controller.InputSentences.Add(currentInputSentence);
            currentInputSentence = "";
        }
    }

    private void OnInput(string? value)
    {
        if (value is null) return;
        Console.WriteLine(value);
        currentInputSentence = value;
    }

    private void OnCopy()
    {
        Console.WriteLine("Copy detected");
    }

    private void OnPaste()
    {
        Console.WriteLine("Paste Detected");
    }
}